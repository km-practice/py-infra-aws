name: Terraform Deployment

on:
  workflow_call:
    inputs:
      working_directory:
        required: true
        type: string
      aws_region:
        required: true
        type: string

  workflow_dispatch:

env:
  TF_IN_AUTOMATION: true

jobs:
  deploy_dev:
    name: Deploy to dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/${{ inputs.working_directory }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Initialize Terraform Backend
        run: terraform init -reconfigure -backend-config="key=state/dev/terraform.tfstate"

      - name: Select or Create Terraform Workspace
        run: terraform workspace new dev || terraform workspace select dev

      # Terraform Tests
      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Initialize
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Set up Go for Terratest
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16'

      - name: Setup Go module
        run: |
          cd ./test
          if [ ! -f go.mod ]; then
            go mod init example.com/terraform-test
          fi
          go mod tidy

      - name: Run Terratest
        working-directory: terraform/test
        run: go test -v

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Checkov
        run: pip install --upgrade checkov

      - name: Compliance Check with Checkov
        run: checkov -d ./
        continue-on-error: true

  deploy_staging:
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs: deploy_dev
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Initialize Terraform Backend
        run: terraform init -reconfigure -backend-config="key=state/staging/terraform.tfstate"

      - name: Select or Create Terraform Workspace
        run: terraform workspace new staging || terraform workspace select staging

      - name: Terraform Plan
        run: terraform plan -var-file="./environments/staging.tfvars"

      - name: Terraform Apply
        run: terraform destroy -auto-approve -var-file="./environments/staging.tfvars"
        if: github.ref == 'refs/heads/main'

  deploy_prod:
    name: Deploy to prod
    runs-on: ubuntu-latest
    needs: deploy_staging
    environment: prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Initialize Terraform Backend
        run: terraform init -reconfigure -backend-config="key=state/prod/terraform.tfstate"

      - name: Select or Create Terraform Workspace
        run: terraform workspace new prod || terraform workspace select prod

      - name: Terraform Plan
        run: terraform plan -var-file="./environments/prod.tfvars"

      - name: Terraform Apply
        run: terraform destroy -auto-approve -var-file="./environments/prod.tfvars"
        if: github.ref == 'refs/heads/main'

















        




















        























        

