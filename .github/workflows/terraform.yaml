name: Terraform Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TF_IN_AUTOMATION: true

jobs:
  deploy_dev:
    name: Deploy to dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Initialize Terraform Backend
        working-directory: terraform/
        run: terraform init -reconfigure -backend-config="key=state/dev/terraform.tfstate"

      - name: Select or Create Terraform Workspace
        working-directory: terraform/
        run: terraform workspace new dev || terraform workspace select dev

      # Terraform Tests
      # - name: Terraform Format Check
      #   run: terraform fmt -check
      #   working-directory: terraform/

      # - name: Terraform Initialize
      #   run: terraform init
      #   working-directory: terraform/

      # - name: Terraform Validate
      #   run: terraform validate
      #   working-directory: terraform/

      # - name: Set up Go for Terratest
      #   uses: actions/setup-go@v2
      #   with:
      #     go-version: '^1.16'

      # - name: Setup Go module
      #   run: |
      #     cd terraform/test
      #     if [ ! -f go.mod ]; then
      #       go mod init example.com/terraform-test
      #     fi
      #     go mod tidy

      # - name: Run Terratest
      #   working-directory: terraform/test
      #   run: go test -v

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Checkov
        run: pip install --upgrade checkov

      - name: Compliance Check with Checkov
        run: checkov -d terraform/
        continue-on-error: true

  deploy_staging:
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs: deploy_dev
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Initialize Terraform Backend
        working-directory: terraform/
        run: terraform init -reconfigure -backend-config="key=state/staging/terraform.tfstate"

      - name: Select or Create Terraform Workspace
        working-directory: terraform/
        run: terraform workspace new staging || terraform workspace select staging

      - name: Terraform Plan
        working-directory: terraform/
        run: terraform plan -var-file="environments/staging.tfvars"

      - name: Terraform Apply
        working-directory: terraform/
        run: terraform destroy -auto-approve -var-file="environments/staging.tfvars"
        if: github.ref == 'refs/heads/main'

  deploy_prod:
    name: Deploy to prod
    runs-on: ubuntu-latest
    needs: deploy_staging
    environment: prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Initialize Terraform Backend
        working-directory: terraform/
        run: terraform init -reconfigure -backend-config="key=state/prod/terraform.tfstate"

      - name: Select or Create Terraform Workspace
        working-directory: terraform/
        run: terraform workspace new prod || terraform workspace select prod

      - name: Terraform Plan
        working-directory: terraform/
        run: terraform plan -var-file="environments/prod.tfvars"

      - name: Terraform Apply
        working-directory: terraform/
        run: terraform destroy -auto-approve -var-file="environments/prod.tfvars"
        if: github.ref == 'refs/heads/main'

















        

